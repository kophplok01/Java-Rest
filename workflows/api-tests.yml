name: API Automation

on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  GH_TOKEN: ${{ github.token }}
  JOB_NAMES: "Cases Procedures Catalogs OpsTerritories Customers Materials Branches"

jobs:
  common-api-steps:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Automation project for API
        run: mvn install -DskipTests

      - name: Cache repository checkout
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-checkout-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-checkout-

      - name: Notify Slack on Failure
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          job_name="${{ github.job }}"
          github_run_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            execution_type="Scheduled"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            execution_type="Manual"
            triggered_by="Triggered by: ${{ github.actor }}"
          else
            execution_type="Unknown"
          fi    

          branch=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          message=":x: *Build ${job_name} failed*\\nExecution type: *${execution_type}*\\nBranch: *${branch}*\\n${triggered_by}\\nDetails: ${github_run_url}"
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"${message}\",
            \"mrkdwn\": true
          }" ${{ secrets.SLACK_WEBHOOK_URL }}

  set-matrix:
    needs: common-api-steps
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set job matrix
        id: set-matrix
        run: |
          jobs=(${{ env.JOB_NAMES }})
          matrix=$(printf '{"include":[%s]}' "$(printf '{"job-name":"%s"},' "${jobs[@]}" | sed 's/,$//')")
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  jobs-matrix:
    needs: set-matrix
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    continue-on-error: true
    runs-on: ubuntu-latest
    name: ${{ matrix.job-name }}
    steps:
      - name: Restore repository checkout from cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-checkout-${{ github.sha }}

      - name: Execute Tests
        id: execute_tests
        uses: ./Common/Actions/ExecuteTests
        with:
          tags: "@${{ matrix.job-name }}"
          report_name: "API-${{ matrix.job-name }}"
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          JOB_NAME: ${{ matrix.job-name }}

  notify-slack:
    needs: jobs-matrix
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        run: |
          for job in ${{ env.JOB_NAMES }}; do
          echo "Downloading artifact for $job"
          mkdir -p downloaded-artifacts-$job/
          gh run download --name "API-${job}-Action--json-Report" --dir downloaded-artifacts-$job
          done

      - name: Send Slack notification
        shell: bash
        run: |
          total_passed_scenarios_all=0
          total_scenarios_all=0
          for job in ${{ env.JOB_NAMES }}; do
          echo "Processing JSON for $job"
          JSON_FILE="downloaded-artifacts-$job/webops-automation-tests.json"
          if [ -f "$JSON_FILE" ]; then
           passed_scenarios_count=$(jq '.[].elements | map(select(.keyword == "Scenario" and (.steps | all(.result.status == "passed")))) | length' "$JSON_FILE")
           outline_passed_scenarios_count=$(jq '[.[] | .elements | map(select(.keyword == "Scenario Outline" and (.steps | all(.result.status == "passed"))))] | flatten | length' "$JSON_FILE")
           scenarios_count=$(jq '.[].elements | map(select(.keyword == "Scenario")) | length' "$JSON_FILE")
           outline_scenarios_total=$(jq '[.[] | .elements | map(select(.keyword == "Scenario Outline"))] | flatten | length' "$JSON_FILE")
           total_passed_scenarios=$((passed_scenarios_count + outline_passed_scenarios_count))
           total_scenarios=$((outline_scenarios_total + scenarios_count))
          
           echo "Passed scenarios for $job: $total_passed_scenarios"
           echo "Outline passed scenarios for $job: $total_scenarios"
          
           total_passed_scenarios_all=$((total_passed_scenarios_all + total_passed_scenarios))
           total_scenarios_all=$((total_scenarios_all + total_scenarios))
          else
           echo "JSON file not found for $job"
          fi
          done
          echo "zzz" $total_passed_scenarios_all
          echo "bbb" $total_scenarios_all
          
          github_run_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
          execution_type="Scheduled"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          execution_type="Manual"
          triggered_by="Triggered by: ${{ github.actor }}"
          else
          execution_type="Unknown"
          fi 
          branch=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          message="*Api Automation Pipeline* Successfully executed.\\nExecution type: *${execution_type}*\\nBranch: *${branch}*\\n${triggered_by}\\n:white_check_mark: Test Cases passed: $total_passed_scenarios_all/$total_scenarios_all"
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"$message\",
            \"attachments\": [
             {
                \"fallback\": \"View on GitHub\",
                \"actions\": [
                 {
                   \"type\": \"button\",
                   \"text\": \"View Execution Details\",
                   \"url\": \"$github_run_url\",
                   \"style\": \"primary\",
                   \"emoji\": true
                 },
                 {
                   \"type\": \"button\",
                   \"text\": \"Download Results\",
                   \"url\": \"$github_run_url\",
                   \"style\": \"primary\",
                   \"emoji\": \":arrow_down:\"
                 }
               ]
             }
           ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}



